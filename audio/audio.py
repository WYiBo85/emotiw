# -*- coding: utf-8 -*-
"""audio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F9_b87mpnAGEuJulfSCrY-z3nb4GXcCB
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip install pydub

from tensorflow.keras.models import load_model
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_audio
import os
import glob
import time
import importlib


os.chdir('/content/gdrive/My Drive/cs231n/notebooks/audio-new')

import arffToNp
importlib.reload(arffToNp)
import subprocess





# add option for soft vs hard
def predict(mp4_filepath, best_model_filepath):
    """
    Outputs:
    - A tuple with predictions for each class (positive, neutral, negative)
    """

    model = fer_model()
    model.load_model(best_model_filepath)
    return model.predict(mp4_filepath)

class audio_model:
    def __init__(self):
        self.model = ()
        return

    def predict(self, mp4_filepath):
        self.preprocess(mp4_filepath)
        X = cv2.imload("test/happy.jpg")
        X = cv2.resize(X, (48,48))
        X = cv2.cvtColor(X, cv2.COLOR_BGR2GRAY)

        return self.model.predict(img)
        #return (0.1,0.2,0.7)

    def load_model(self, best_model_filepath):
        self.model = load_model(best_model_filepath)
        return

    def train(self, mp4_filepaths):
        # train the model
        # self.model = ....
        return

    def preprocess(self, mp4_filepath):

        """
        Outputs:
        - A numpy array with dimensions (m,n). m is the units in time dependent on the audio splice rate.
            n is the number of features from the openSMILE library.
        """



        output_wav_file = mp4_filepath[-5] + 'extracted_audio.wav'
        mp4_filename = os.path.basename(mp4_filepath)
        audio_home_dir = os.path.dirname(mp4_filepath)


        # Strip the audio from video and store as .wav file
        ffmpeg_extract_audio(mp4_filepath, output_wav_file)
        !cd '$audio_home_dir' ; mkdir to_zip



        # splice the audio files into 2 seconds with 100 ms sliding window.
        # 30 kHz sampling rate
        !cd '$audio_home_dir' ; ls; python SliceAudio.py -i *.wav -o wav -c 2  -b 2 -s 30000 -w 100 -l 2000



        # Walk through each sliced file and get the openSmile features from that file




        #aligned_files = glob.glob(audio_home_dir +"/*.wav")
        out_fn = os.path.join(audio_home_dir, 'val-output-windows-emotion-lib-1.arff')


        !cd '$audio_home_dir'  ; zip -r to_zip.zip  to_zip

        !cd '$audio_home_dir' ; mv 'to_zip.zip' '/content/'

        !cd '$audio_home_dir' ; cd to_zip ; rm *.wav
        !cd '$audio_home_dir' ; rm -d to_zip

        !cd '/content/' ; unzip to_zip.zip

        os.chdir('/content/to_zip/')
        aligned_files = glob.glob('*.wav')
        os.chdir('/content/')
        for in_fn in aligned_files:
          in_fn = os.path.join('/content/to_zip/' , in_fn)
          name = os.path.basename(in_fn)
          out_fn = os.path.join(audio_home_dir, 'val-output-windows-emotion-lib-1.arff')
          !cd 'opensmile-2.3.0' ; inst/bin/SMILExtract -C config/IS13_ComParE.conf -I '$in_fn' -O '$out_fn' -N $name



        !cd to_zip ; rm *.wav
        !rm -d to_zip
        # Convert .arff to .csv
        all_timepoints_feature_array = arffToNp.convert(out_fn)
        print(all_timepoints_feature_array[:, -1].shape)


        # Remove the temp .wav files


        # Remove the temp .arff file
        os.remove(out_fn)

        !cd '$audio_home_dir' ; rm *.wav


        return all_timepoints_feature_array

def installOpenSMILE():
    os.chdir('/content/')
    !tar -zxvf 'opensmile-2.3.0.tar.gz'
    !sed -i '117s/(char)/(unsigned char)/g' opensmile-2.3.0/src/include/core/vectorTransform.hpp
    !sudo apt-get update
    !sudo apt-get install autoconf automake libtool m4 gcc
    !cd 'opensmile-2.3.0' ; bash buildStandalone.sh

installOpenSMILE()

!cd 'opensmile-2.3.0' ; inst/bin/SMILExtract -h

audio_model_1 = audio_model()
output_arr = audio_model_1.preprocess(mp4_filepath='/content/gdrive/My Drive/cs231n/notebooks/audio-new/1_1.mp4')

output_arr.shape
